#######################################
# Gallery
#######################################

"""
Gallery type
"""
type Gallery {
  id: ID!
  checksum: String!
  path: String!
  title: String

  # The files in the gallery
  files: [GalleryFilesType]! # Resolver
}

type GalleryFilesType {
  index: Int!
  name: String
  path: String
}

#######################################
# Performer
#######################################

type Performer {
  id: ID!
  checksum: String!
  name: String
  url: String
  twitter: String
  instagram: String
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
  favorite: Boolean!

  image_path: String # Resolver
  scene_count: Int # Resolver
  scenes: [Scene]!
}

#######################################
# Scene Marker Tag
#######################################

type SceneMarkerTag {
  tag: Tag
  scene_markers: [SceneMarker]!
}

#######################################
# Scene Marker
#######################################

type SceneMarker {
  id: ID!
  scene: Scene!
  title: String!
  seconds: Float!
  primary_tag: Tag!
  tags: [Tag]!

  stream: String! # Resolver
  preview: String! # Resolver
}

#######################################
# Scene
#######################################

type SceneFileType {
  size: String
  duration: Float
  video_codec: String
  audio_codec: String
  width: Int
  height: Int
}

type ScenePathsType {
  screenshot: String # Resolver
  preview: String # Resolver
  stream: String # Resolver
  webp: String # Resolver
  vtt: String # Resolver
  chapters_vtt: String # Resolver
}

type Scene {
  id: ID!
  checksum: String!
  title: String
  details: String
  url: String
  date: String
  rating: Int
  path: String!

  file: SceneFileType! # Resolver
  paths: ScenePathsType! # Resolver
  is_streamable: Boolean! # Resolver

  scene_markers: [SceneMarker]!
  gallery: Gallery
  studio: Studio
  tags: [Tag]!
  performers: [Performer]!

  scene_marker_tags: [SceneMarkerTag]! # TODO remove?
}

type FindScenesResultType {
  count: Int!
  scenes: [Scene]!
}

#######################################
# Scraped Performer
#######################################

"""
A performer from a scraping operation...
"""
type ScrapedPerformer {
  name: String
  url: String
  twitter: String
  instagram: String
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
}

#######################################
# Stats
#######################################

type StatsResultType {
  scene_count: Int!
  gallery_count: Int!
  performer_count: Int!
  studio_count: Int!
  tag_count: Int!
}

#######################################
# Studio
#######################################

type Studio {
  id: ID!
  checksum: String!
  name: String!
  url: String

  image_path: String # Resolver
  scene_count: Int # Resolver
}

input StudioCreateInput {
  name: String!
  url: String
  image: String!
}

input StudioUpdateInput {
  id: ID!
  name: String
  url: String
  image: String
}

type FindStudiosResultType {
  count: Int!
  studios: [Studio]!
}

#######################################
# Tag
#######################################

type Tag {
  id: ID!
  name: String!

  scene_count: Int # Resolver
  scene_marker_count: Int # Resolver
}

input TagCreateInput {
  name: String!
}

input TagUpdateInput {
  id: ID!
  name: String!
}

#######################################
# Filters
#######################################

enum SortDirectionEnum {
  ASC
  DESC
}

input FindFilterType {
  q: String
  page: Int
  per_page: Int
  sort: String
  direction: SortDirectionEnum
}

enum ResolutionEnum {
  "240p", LOW
  "480p", STANDARD
  "720p", STANDARD_HD
  "1080p", FULL_HD
  "4k", FOUR_K
}

input SceneFilterType {
  rating: Int
  resolution: ResolutionEnum
  # TODO
}

#############
# Root Schema
#############

type Query {
  findScenes(scene_filter: SceneFilterType, scene_ids: [Int], filter: FindFilterType): FindScenesResultType!

  findStudio(id: ID!): Studio
  findStudios(filter: FindFilterType): FindStudiosResultType!

  findGallery(id: ID!): Gallery

  findTag(id: ID!): Tag

  stats: StatsResultType!
}

type Mutation {
  studioCreate(input: StudioCreateInput!): Studio
  studioUpdate(input: StudioUpdateInput!): Studio
  tagCreate(input: TagCreateInput!): Tag
  tagUpdate(input: TagUpdateInput!): Tag
}

schema {
  query: Query
  mutation: Mutation
}