# Querys

query FindScenes($filter: FindFilterType, $scene_filter: SceneFilterType, $scene_ids: [Int!]) {
  findScenes(filter: $filter, scene_filter: $scene_filter, scene_ids: $scene_ids) {
    count
    scenes {
      ...SlimSceneData
    }
  }
}

query FindScene($id: ID, $checksum: String) {
  findScene(id: $id, checksum: $checksum) {
    ...SceneData
  }

  sceneMarkerTags(scene_id: $id) {
    tag {
      id
      name
    }
    scene_markers {
      ...SceneMarkerData
    }
  }
}

query FindSceneForEditing($id: ID) {
  findScene(id: $id) {
    ...SceneData
  }

  allPerformers {
    id
    name
    birthdate
    image_path
  }

  allTags {
    id
    name
  }

  allStudios {
    id
    name
  }

  validGalleriesForScene(scene_id: $id) {
    id
    path
  }
}

query FindSceneMarkers($filter: FindFilterType, $scene_marker_filter: SceneMarkerFilterType) {
  findSceneMarkers(filter: $filter, scene_marker_filter: $scene_marker_filter) {
    count
    scene_markers {
      ...SceneMarkerData
    }
  }
}

query SceneWall($q: String) {
  sceneWall(q: $q) {
    ...SceneData
  }
}

query MarkerWall($q: String) {
  markerWall(q: $q) {
    ...SceneMarkerData
  }
}

query FindPerformers($filter: FindFilterType, $performer_filter: PerformerFilterType) {
  findPerformers(filter: $filter, performer_filter: $performer_filter) {
    count
    performers {
      ...PerformerData
    }
  }
}

query FindPerformer($id: ID!) {
  findPerformer(id: $id) {
    ...PerformerData
  }
}

query FindStudios($filter: FindFilterType) {
  findStudios(filter: $filter) {
    count
    studios {
      ...StudioData
    }
  }
}

query FindStudio($id: ID!) {
  findStudio(id: $id) {
    ...StudioData
  }
}

query FindGalleries($filter: FindFilterType) {
  findGalleries(filter: $filter) {
    count
    galleries {
      ...GalleryData
    }
  }
}

query FindGallery($id: ID!) {
  findGallery(id: $id) {
    ...GalleryData
  }
}

query FindTag($id: ID!) {
  findTag(id: $id) {
    ...TagData
  }
}

query MarkerStrings($q: String, $sort: String) {
  markerStrings(q: $q, sort: $sort) {
    id
    count
    title
  }
}

query ScrapeFreeones($performer_name: String!) {
  scrapeFreeones(performer_name: $performer_name) {
    name
    url
    twitter
    instagram
    birthdate
    ethnicity
    country
    eye_color
    height
    measurements
    fake_tits
    career_length
    tattoos
    piercings
    aliases
  }
}

query ScrapeFreeonesPerformers($q: String!) {
  scrapeFreeonesPerformerList(query: $q)
}

query AllPerformers {
  allPerformers {
    ...PerformerData
  }
}

query AllStudios {
  allStudios {
    ...StudioData
  }
}

query AllTags {
  allTags {
    ...TagData
  }
}

query AllSceneMarkers {
  allSceneMarkers {
    ...SceneMarkerData
  }
}

query Stats {
  stats {
    scene_count,
    gallery_count,
    performer_count,
    studio_count,
    tag_count
  }
}


# Mutations


mutation SceneUpdate(
  $id: ID!,
  $title: String,
  $details: String,
  $url: String,
  $date: String,
  $rating: Int,
  $studio_id: ID,
  $gallery_id: ID,
  $performer_ids: [ID!] = [],
  $tag_ids: [ID!] = []) {

  sceneUpdate(input: {
                        id: $id,
                        title: $title,
                        details: $details,
                        url: $url,
                        date: $date,
                        rating: $rating,
                        studio_id: $studio_id,
                        gallery_id: $gallery_id,
                        performer_ids: $performer_ids,
                        tag_ids: $tag_ids
                      }) {
      ...SceneData
  }
}

mutation PerformerCreate(
  $name: String,
  $url: String,
  $birthdate: String,
  $ethnicity: String,
  $country: String,
  $eye_color: String,
  $height: String,
  $measurements: String,
  $fake_tits: String,
  $career_length: String,
  $tattoos: String,
  $piercings: String,
  $aliases: String,
  $twitter: String,
  $instagram: String,
  $favorite: Boolean,
  $image: String!) {

  performerCreate(input: {
                            name: $name,
                            url: $url,
                            birthdate: $birthdate,
                            ethnicity: $ethnicity,
                            country: $country,
                            eye_color: $eye_color,
                            height: $height,
                            measurements: $measurements,
                            fake_tits: $fake_tits,
                            career_length: $career_length,
                            tattoos: $tattoos,
                            piercings: $piercings,
                            aliases: $aliases,
                            twitter: $twitter,
                            instagram: $instagram,
                            favorite: $favorite,
                            image: $image
                          }) {
      ...PerformerData
  }
}

mutation PerformerUpdate(
  $id: ID!,
  $name: String,
  $url: String,
  $birthdate: String,
  $ethnicity: String,
  $country: String,
  $eye_color: String,
  $height: String,
  $measurements: String,
  $fake_tits: String,
  $career_length: String,
  $tattoos: String,
  $piercings: String,
  $aliases: String,
  $twitter: String,
  $instagram: String,
  $favorite: Boolean,
  $image: String) {

  performerUpdate(input: {
                            id: $id,
                            name: $name,
                            url: $url,
                            birthdate: $birthdate,
                            ethnicity: $ethnicity,
                            country: $country,
                            eye_color: $eye_color,
                            height: $height,
                            measurements: $measurements,
                            fake_tits: $fake_tits,
                            career_length: $career_length,
                            tattoos: $tattoos,
                            piercings: $piercings,
                            aliases: $aliases,
                            twitter: $twitter,
                            instagram: $instagram,
                            favorite: $favorite,
                            image: $image
                          }) {
    ...PerformerData
  }
}

mutation StudioCreate(
  $name: String!,
  $url: String,
  $image: String!) {

  studioCreate(input: { name: $name, url: $url, image: $image }) {
    ...StudioData
  }
}

mutation StudioUpdate(
  $id: ID!
  $name: String,
  $url: String,
  $image: String) {

  studioUpdate(input: { id: $id, name: $name, url: $url, image: $image }) {
    ...StudioData
  }
}

mutation TagCreate($name: String!) {
  tagCreate(input: { name: $name }) {
    ...TagData
  }
}

mutation TagDestroy($id: ID!) {
  tagDestroy(input: { id: $id })
}

mutation TagUpdate($id: ID!, $name: String!) {
  tagUpdate(input: { id: $id, name: $name }) {
    ...TagData
  }
}

mutation SceneMarkerCreate(
  $title: String!,
  $seconds: Float!,
  $scene_id: ID!,
  $primary_tag_id: ID!,
  $tag_ids: [ID!] = []) {

  sceneMarkerCreate(input: {
                              title: $title,
                              seconds: $seconds,
                              scene_id: $scene_id,
                              primary_tag_id: $primary_tag_id,
                              tag_ids: $tag_ids
                            }) {
    ...SceneMarkerData
  }
}

mutation SceneMarkerUpdate(
  $id: ID!,
  $title: String!,
  $seconds: Float!,
  $scene_id: ID!,
  $primary_tag_id: ID!,
  $tag_ids: [ID!] = []) {

  sceneMarkerUpdate(input: {
                              id: $id,
                              title: $title,
                              seconds: $seconds,
                              scene_id: $scene_id,
                              primary_tag_id: $primary_tag_id,
                              tag_ids: $tag_ids
                            }) {
    ...SceneMarkerData
  }
}

mutation SceneMarkerDestroy($id: ID!) {
  sceneMarkerDestroy(id: $id)
}

query MetadataImport {
  metadataImport
}

query MetadataExport {
  metadataExport
}

query MetadataScan {
  metadataScan
}

query MetadataGenerate {
  metadataGenerate
}

query MetadataClean {
  metadataClean
}

subscription MetadataUpdate {
  metadataUpdate
}
